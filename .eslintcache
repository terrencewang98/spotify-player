[{"C:\\Users\\terrence\\spotify-player\\src\\index.js":"1","C:\\Users\\terrence\\spotify-player\\src\\App.js":"2"},{"size":167,"mtime":1611051451908,"results":"3","hashOfConfig":"4"},{"size":3699,"mtime":1611052697365,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"tonmej",{"filePath":"9","messages":"10","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\terrence\\spotify-player\\src\\index.js",[],["12","13"],"C:\\Users\\terrence\\spotify-player\\src\\App.js",["14","15","16","17","18"],"import React, {Component} from 'react'\nimport SpotifyWebApi from 'spotify-web-api-js'\nimport './App.css'\nimport play from './images/play.png'\nimport pause from './images/pause.png'\nimport skipForward from './images/skipForward.png'\nimport skipBackward from './images/skipBackward.png'\n\nconst spotifyApi = new SpotifyWebApi()\nconst authEndpoint = 'https://accounts.spotify.com/authorize'\nconst clientId = \"515322ae70264903996d7b12aaed4aff\";\nconst redirectUri = \"http://localhost:3000\";\nconst scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"user-modify-playback-state\"\n];\n\nclass App extends Component {\n  intervalID\n  state = {\n    loggedIn: false, \n    isPlaying: false,\n    nowPlaying: { name: 'Not Playing', artists: [], albumArt: '' },\n  }\n\n  componentDidMount(){\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n      this.setState({loggedIn: true})\n      this.getNowPlaying()\n      this.intervalID = setInterval(this.getNowPlaying.bind(this), 500)\n    }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.intervalID)\n  }\n\n  getHashParams(){\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying(){\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n          this.setState({\n            isPlaying: response.is_playing,\n            nowPlaying: {\n              name: response.item ? response.item.name : 'Not Playing',\n              artists: response.item ? response.item.artists.map((artist) => artist.name).join(', ') : [],  \n              albumArt: response.item ? response.item.album.images[0].url : ''\n            }\n          })\n      })\n  }\n\n  handleSkipBackwardClick(){\n    spotifyApi.skipToPrevious()\n  }\n\n  handlePlayPauseButtonClick(){\n    if(this.state.isPlaying){\n      spotifyApi.pause()\n    }\n    else{\n      spotifyApi.play()\n    }\n  }\n\n  handleSkipForwardClick(){\n    spotifyApi.skipToNext()\n  }\n\n  render(){\n\n    return (\n      <div>\n        {!this.state.loggedIn && (\n          <div className = 'login'>\n            <a href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\n              Login to Spotify\n            </a>\n          </div>\n        )}\n        {this.state.loggedIn && (\n          <div className = 'player'>\n            <div>\n              <img src = {this.state.nowPlaying.albumArt} style = {{'width': '100%'}} />\n            </div>\n            <div className = \"buttons\" style = {{'width': '100%', backgroundColor: '#708090'}}>\n              <button>\n                <img src = {skipBackward} onClick = {this.handleSkipBackwardClick.bind(this)} />\n              </button>\n              <button>\n                {this.state.isPlaying && (\n                  <img src = {pause} onClick = {this.handlePlayPauseButtonClick.bind(this)} />\n                )}\n                {!this.state.isPlaying && (\n                  <img src = {play} onClick = {this.handlePlayPauseButtonClick.bind(this)} />\n                )}\n              </button>\n              <button>\n                <img src = {skipForward} onClick = {this.handleSkipForwardClick.bind(this)} />\n              </button>              \n            </div>\n            <div>\n              <p>{this.state.nowPlaying.name}</p> \n              <p>{this.state.nowPlaying.artists}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":99,"column":15,"nodeType":"25","endLine":99,"endColumn":89},{"ruleId":"23","severity":1,"message":"24","line":103,"column":17,"nodeType":"25","endLine":103,"endColumn":97},{"ruleId":"23","severity":1,"message":"24","line":107,"column":19,"nodeType":"25","endLine":107,"endColumn":95},{"ruleId":"23","severity":1,"message":"24","line":110,"column":19,"nodeType":"25","endLine":110,"endColumn":94},{"ruleId":"23","severity":1,"message":"24","line":114,"column":17,"nodeType":"25","endLine":114,"endColumn":95},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]